
package GUI;

import Database.Pair;
import Logic.LogicController;
import Logic.Itinerary.Itinerary;
import Logic.Itinerary.ItineraryItem;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/*
 * @author hongwei
 */
public class ViewItinerary extends javax.swing.JDialog {
    static Itinerary myItinerary;
    /** Creates new form ViewItinerary */
    public ViewItinerary(java.awt.Dialog parent, boolean modal, Itinerary pl) {
        super(parent, modal);
        initComponents();
        myItinerary = pl;
        
        GUIUpdater.updateItineraryTable(myItinerary);
        EditItineraryItemButton.setVisible(false);
        DeleteItineraryItemButton.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ViewItineraryBackground = new javax.swing.JPanel();
        ItineraryTableBackground = new javax.swing.JScrollPane();
        ItineraryTable = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }
            public String getToolTipText( MouseEvent e )
            {
                int row = rowAtPoint( e.getPoint() );
                int column = columnAtPoint( e.getPoint() );

                Object value = getValueAt(row, column);
                return value == null ? null : value.toString();
            }
        };
        AddItineraryItemButton = new javax.swing.JButton();
        EditItineraryItemButton = new javax.swing.JButton();
        DeleteItineraryItemButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        SubmitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        ViewItineraryBackground.setBackground(new java.awt.Color(227, 227, 227));
        ViewItineraryBackground.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        ViewItineraryBackground.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ItineraryTable.setFont(new java.awt.Font("Ubuntu", 0, 14));
        ItineraryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ItineraryTable.setFocusable(false);
        ItineraryTable.setGridColor(new java.awt.Color(255, 204, 51));
        ItineraryTable.setRowHeight(40);
        ItineraryTable.setSelectionBackground(new java.awt.Color(255, 204, 51));
        ItineraryTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        ItineraryTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ItineraryTable.setTableHeader(null);
        ItineraryTable.setUpdateSelectionOnSort(false);
        ItineraryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItineraryTableMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ItineraryTableMouseExited(evt);
            }
        });
        ItineraryTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                ItineraryTableMouseMoved(evt);
            }
        });
        ItineraryTableBackground.setViewportView(ItineraryTable);
        ItineraryTable.getColumnModel().getColumn(0).setResizable(false);
        ItineraryTable.getColumnModel().getColumn(1).setResizable(false);
        ItineraryTable.getColumnModel().getColumn(0).setPreferredWidth(250);
        ItineraryTable.getColumnModel().getColumn(0).setMinWidth(250);
        ItineraryTable.getColumnModel().getColumn(0).setMaxWidth(250);

        class newrendererItinerary_cell extends DefaultTableCellRenderer
        {
            public Component getTableCellRendererComponent(JTable table, Object obj, boolean isSelected, boolean hasFocus, int row, int column)
            {
                ArrayList<Pair> programmeStartDuration = PEPOGUI.ProgrammeStartDuration;
                double scaledown = 2.63;

                // to fix - time before 8am or after 12 should show partially
                AffineTransform tx = new AffineTransform();
                if(programmeStartDuration.get(row).First()/scaledown >= 0)
                tx.translate(programmeStartDuration.get(row).First()/scaledown, 0);
                else // before 8am
                return null;

                if(programmeStartDuration.get(row).Second()/scaledown > 1)
                tx.scale(programmeStartDuration.get(row).Second()/scaledown, 1);

                AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage img = null;
                if(row%2==0)
                img = op.filter(PEPOGUI.programmeDuration, null);
                else
                img = op.filter(PEPOGUI.programmeDuration2, null);
                ImageIcon icon = new ImageIcon(img);

                JLabel label = (JLabel)super.getTableCellRendererComponent(table, obj, isSelected, hasFocus, row, column);
                label.setIcon(icon);
                return label;
            }
        }
        ItineraryTable.getColumnModel().getColumn(1).setCellRenderer(new newrendererItinerary_cell());

        ViewItineraryBackground.add(ItineraryTableBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 830, 290));

        AddItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addbutton.png"))); // NOI18N
        AddItineraryItemButton.setBorderPainted(false);
        AddItineraryItemButton.setContentAreaFilled(false);
        AddItineraryItemButton.setFocusPainted(false);
        AddItineraryItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                AddItineraryItemButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                AddItineraryItemButtonMousePressed(evt);
            }
        });
        AddItineraryItemButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                AddItineraryItemButtonMouseMoved(evt);
            }
        });
        AddItineraryItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItineraryItemButtonActionPerformed(evt);
            }
        });
        ViewItineraryBackground.add(AddItineraryItemButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 70, 38, 38));

        EditItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/editbutton.png"))); // NOI18N
        EditItineraryItemButton.setBorderPainted(false);
        EditItineraryItemButton.setContentAreaFilled(false);
        EditItineraryItemButton.setFocusPainted(false);
        EditItineraryItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                EditItineraryItemButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                EditItineraryItemButtonMousePressed(evt);
            }
        });
        EditItineraryItemButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                EditItineraryItemButtonMouseMoved(evt);
            }
        });
        EditItineraryItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditItineraryItemButtonActionPerformed(evt);
            }
        });
        ViewItineraryBackground.add(EditItineraryItemButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 250, 38, 38));

        DeleteItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/deletebutton.png"))); // NOI18N
        DeleteItineraryItemButton.setBorderPainted(false);
        DeleteItineraryItemButton.setContentAreaFilled(false);
        DeleteItineraryItemButton.setFocusPainted(false);
        DeleteItineraryItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                DeleteItineraryItemButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DeleteItineraryItemButtonMousePressed(evt);
            }
        });
        DeleteItineraryItemButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                DeleteItineraryItemButtonMouseMoved(evt);
            }
        });
        DeleteItineraryItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteItineraryItemButtonActionPerformed(evt);
            }
        });
        ViewItineraryBackground.add(DeleteItineraryItemButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 290, 38, 38));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/timeslot.png"))); // NOI18N
        ViewItineraryBackground.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, -1, -1));

        SubmitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/submitbutton.png"))); // NOI18N
        SubmitButton.setBorderPainted(false);
        SubmitButton.setContentAreaFilled(false);
        SubmitButton.setFocusPainted(false);
        SubmitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SubmitButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                SubmitButtonMousePressed(evt);
            }
        });
        SubmitButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                SubmitButtonMouseMoved(evt);
            }
        });
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });
        ViewItineraryBackground.add(SubmitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 330, 38, 38));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ViewItineraryBackground, javax.swing.GroupLayout.DEFAULT_SIZE, 912, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ViewItineraryBackground, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddItineraryItemButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddItineraryItemButtonMouseExited
        AddItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addbutton.png")));
    }//GEN-LAST:event_AddItineraryItemButtonMouseExited

    private void AddItineraryItemButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddItineraryItemButtonMouseMoved
        int x = evt.getX();
        int y = evt.getY();
        double dx = AddItineraryItemButton.getWidth()/2 - x;
        double dy = AddItineraryItemButton.getHeight()/2 - y;
        double sr = Math.sqrt(dx*dx + dy*dy );
        if (sr <= AddItineraryItemButton.getWidth()/2)
            AddItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addbuttonhover.png")));
        else
            AddItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addbutton.png")));
    }//GEN-LAST:event_AddItineraryItemButtonMouseMoved

    private void AddItineraryItemButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddItineraryItemButtonMousePressed
        AddItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addbuttonclick.png")));
    }//GEN-LAST:event_AddItineraryItemButtonMousePressed

    private void AddItineraryItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItineraryItemButtonActionPerformed
        AddItineraryItem addpli = new AddItineraryItem(this, true, myItinerary);
        addpli.setTitle("Add Programme");
        addpli.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        addpli.setLocationRelativeTo(null);

        //Display the window.
        //Darken.setVisible(true);
        addpli.pack();
        addpli.setVisible(true);
        //Darken.setVisible(false);
        
        GUIUpdater.updateItineraryTable(myItinerary);
        EditItineraryItemButton.setVisible(false);
        DeleteItineraryItemButton.setVisible(false);
    }//GEN-LAST:event_AddItineraryItemButtonActionPerformed

    private void EditItineraryItemButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditItineraryItemButtonMouseExited
        EditItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/editbutton.png")));
    }//GEN-LAST:event_EditItineraryItemButtonMouseExited

    private void EditItineraryItemButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditItineraryItemButtonMouseMoved
        int x = evt.getX();
        int y = evt.getY();
        double dx = EditItineraryItemButton.getWidth()/2 - x;
        double dy = EditItineraryItemButton.getHeight()/2 - y;
        double sr = Math.sqrt(dx*dx + dy*dy );
        if (sr <= EditItineraryItemButton.getWidth()/2)
            EditItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/editbuttonhover.png")));
        else
            EditItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/editbutton.png")));
    }//GEN-LAST:event_EditItineraryItemButtonMouseMoved

    private void EditItineraryItemButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditItineraryItemButtonMousePressed
        EditItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/editbuttonclick.png")));
    }//GEN-LAST:event_EditItineraryItemButtonMousePressed

    private void EditItineraryItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditItineraryItemButtonActionPerformed
        EditItineraryItem editpli = new EditItineraryItem(this, true, myItinerary, myItinerary.getSortedItineraryItemList().get(ItineraryTable.getSelectedRow()));
        editpli.setTitle("Edit Programme");
        editpli.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        editpli.setLocationRelativeTo(null);

        //Display the window.
        //Darken.setVisible(true);
        editpli.pack();
        editpli.setVisible(true);
        //Darken.setVisible(false);
        
        GUIUpdater.updateItineraryTable(myItinerary);
        GUIUpdater.updateEventDayItineraryTextArea();
        ItineraryTable.clearSelection();
        ItineraryTableClicked = -1;
        EditItineraryItemButton.setVisible(false);
        DeleteItineraryItemButton.setVisible(false);
    }//GEN-LAST:event_EditItineraryItemButtonActionPerformed

    private void DeleteItineraryItemButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteItineraryItemButtonMouseExited
         DeleteItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/deletebutton.png")));
    }//GEN-LAST:event_DeleteItineraryItemButtonMouseExited

    private void DeleteItineraryItemButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteItineraryItemButtonMouseMoved
        int x = evt.getX();
        int y = evt.getY();
        double dx = DeleteItineraryItemButton.getWidth()/2 - x;
        double dy = DeleteItineraryItemButton.getHeight()/2 - y;
        double sr = Math.sqrt(dx*dx + dy*dy );
        if (sr <= DeleteItineraryItemButton.getWidth()/2)
            DeleteItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/deletebuttonhover.png")));
        else
            DeleteItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/deletebutton.png")));
    }//GEN-LAST:event_DeleteItineraryItemButtonMouseMoved

    private void DeleteItineraryItemButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteItineraryItemButtonMousePressed
        DeleteItineraryItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/deletebuttonclick.png")));
    }//GEN-LAST:event_DeleteItineraryItemButtonMousePressed

    private void DeleteItineraryItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteItineraryItemButtonActionPerformed
        ItineraryItem todelete = myItinerary.getSortedItineraryItemList().get(ItineraryTable.getSelectedRow());
        int n = JOptionPane.showConfirmDialog(this,
        "Delete "+ todelete.getName() + "?",
        "Confirmation",
        JOptionPane.YES_NO_OPTION);
        if (n == 0){
            try {
                LogicController.deleteItineraryItem(todelete);
            } catch (Exception ex) {
                Logger.getLogger(PEPOGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            GUIUpdater.updateItineraryTable(myItinerary);
        }
    }//GEN-LAST:event_DeleteItineraryItemButtonActionPerformed

    int ItineraryTableClicked = -1;
    
    private void ItineraryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItineraryTableMouseClicked
        if(ItineraryTable.getSelectedRow() != -1){
            EditItineraryItemButton.setVisible(true);
            DeleteItineraryItemButton.setVisible(true);
            ItineraryTableClicked = ItineraryTable.rowAtPoint(evt.getPoint());
        }
        else {
            EditItineraryItemButton.setVisible(false);
            DeleteItineraryItemButton.setVisible(false);
        }
    }//GEN-LAST:event_ItineraryTableMouseClicked
                                   
    private void ItineraryTableMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItineraryTableMouseMoved
        if (ItineraryTableClicked == -1){
            int at = ItineraryTable.rowAtPoint(evt.getPoint());
            if (at != -1)
                ItineraryTable.setRowSelectionInterval(at, at);
            else if (ItineraryTableClicked == -1)
                ItineraryTable.clearSelection();
        }
    }//GEN-LAST:event_ItineraryTableMouseMoved

    private void ItineraryTableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItineraryTableMouseExited
        if (ItineraryTableClicked == -1)
            ItineraryTable.clearSelection();
    }//GEN-LAST:event_ItineraryTableMouseExited

    private void SubmitButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SubmitButtonMouseExited
         SubmitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/submitbutton.png")));
    }//GEN-LAST:event_SubmitButtonMouseExited

    private void SubmitButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SubmitButtonMouseMoved
        int x = evt.getX();
        int y = evt.getY();
        double dx = SubmitButton.getWidth()/2 - x;
        double dy = SubmitButton.getHeight()/2 - y;
        double sr = Math.sqrt(dx*dx + dy*dy );
        if (sr <= SubmitButton.getWidth()/2)
            SubmitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/submitbuttonhover.png")));
        else
            SubmitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/submitbutton.png")));
    }//GEN-LAST:event_SubmitButtonMouseMoved

    private void SubmitButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SubmitButtonMousePressed
        SubmitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/submitbuttonclick.png")));
    }//GEN-LAST:event_SubmitButtonMousePressed

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_SubmitButtonActionPerformed

    public static javax.swing.JTable getItineraryTable(){
        return ItineraryTable;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewItinerary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewItinerary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewItinerary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewItinerary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ViewItinerary dialog = new ViewItinerary(new javax.swing.JDialog(), true,null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    public static Itinerary getItinerary() {
        return myItinerary;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddItineraryItemButton;
    private javax.swing.JButton DeleteItineraryItemButton;
    private javax.swing.JButton EditItineraryItemButton;
    private static javax.swing.JTable ItineraryTable;
    private static javax.swing.JScrollPane ItineraryTableBackground;
    private javax.swing.JButton SubmitButton;
    private javax.swing.JPanel ViewItineraryBackground;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
